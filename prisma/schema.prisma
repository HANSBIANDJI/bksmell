generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  name            String?
  role            Role      @default(USER)
  orders          Order[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  items           OrderItem[]
  total           Float
  deliveryFee     Float
  shipping        ShippingInfo?
  shippingAddress Address?
  payment         Payment?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id])
  perfumeId   String
  perfume     Perfume   @relation(fields: [perfumeId], references: [id])
  quantity    Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Perfume {
  id          String    @id @default(cuid())
  name        String
  brand       String
  description String
  price       Float
  image       String
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  isNew       Boolean   @default(false)
  isOnSale    Boolean   @default(false)
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  perfumes    Perfume[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payment {
  id          String    @id @default(cuid())
  orderId     String    @unique
  order       Order     @relation(fields: [orderId], references: [id])
  amount      Float
  status      PaymentStatus @default(PENDING)
  provider    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id          String    @id @default(cuid())
  orderId     String    @unique
  order       Order     @relation(fields: [orderId], references: [id])
  street      String
  city        String
  state       String
  country     String
  zipCode     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ShippingInfo {
  id          String    @id @default(cuid())
  orderId     String    @unique
  order       Order     @relation(fields: [orderId], references: [id])
  method      ShippingMethod
  trackingNo  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
}
